generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("owner")
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  contacts      Contact[]
  settings      Settings?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MeetingType {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  description     String?
  durationMinutes Int
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  email     String
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookings Booking[]

  @@unique([email, userId])
}

model Booking {
  id            String   @id @default(cuid())
  token         String   @unique @default(cuid())
  userId        String
  meetingTypeId String
  contactId     String
  start         DateTime
  end           DateTime
  status        String   @default("confirmed")
  googleEventId String?
  zoomJoinUrl   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetingType MeetingType @relation(fields: [meetingTypeId], references: [id], onDelete: Restrict)
  contact     Contact     @relation(fields: [contactId], references: [id], onDelete: Restrict)
}

model Settings {
  id              String   @id @default(cuid())
  userId          String   @unique
  calendarId      String   @default("primary")
  businessStart   Int      @default(9) // 9am
  businessEnd     Int      @default(17) // 5pm
  slotStepMinutes Int      @default(30)
  minNoticeHours  Int      @default(24) // no same-day
  bufferMinutes   Int      @default(10)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
